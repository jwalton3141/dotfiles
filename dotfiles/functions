# Extract/uncompress almost everything with one function
extract () {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1 && cd $(echo $1 | sed 's/.tar.bz2//')    ;;
           *.tar.gz)    tar xvzf $1 && cd $(echo $1 | sed 's/.tar.gz//')    ;;
           *.bz2)       bunzip2 $1 && cd $(echo $1 | sed 's/.bz2//')    ;;
           *.rar)       unrar x $1 && cd $(echo $1 | sed 's/.rar//')    ;;
           *.gz)        gunzip $1 && cd $(echo $1 | sed 's/.gz//')    ;;
           *.tar)       tar xvf $1 && cd $(echo $1 | sed 's/.tar//')    ;;
           *.tbz2)      tar xvjf $1 && cd $(echo $1 | sed 's/.tbz2//')    ;;
           *.tgz)       tar xvzf $1 && cd $(echo $1 | sed 's/.tgz//')    ;;
           *.zip)       unzip $1 && cd $(echo $1 | sed 's/.zip//')    ;;
           *.Z)         uncompress $1 && cd $(echo $1 | sed 's/.Z//')    ;;
           *.7z)        7z x $1 && cd $(echo $1 | sed 's/.7z//')    ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }

# xdg-open is a pain to type, and print stderr to null
function open() {
    xdg-open "$1" &> /dev/null &
}

# Make directory and change into it
mkcd () {
	mkdir "$1"
	cd "$1"
}

# Install and restart R package
Rbuild () {
    Rscript -e "devtools::document(
                    roclets = c('rd', 'collate', 'namespace', 'vignette')
                )"
    BUILD_DIR=$(Rscript -e "cat(jrNotes:::get_root_dir())")
    R CMD INSTALL --no-multiarch --with-keep.source "${BUILD_DIR}"
}

# Run inteRgrate checks against our package and record output in a log fil
Rcheck () {
    Rscript -e "inteRgrate::check_via_env(default = TRUE)" | tee check.log
}

Rsource () {
    echo $(sed -n -e 's/Package: //p' DESCRIPTION)_$(sed -n -e 's/Version: //p' DESCRIPTION).tar.gz
}

Render () {
    # If a filename is passed, build that
    if [ $# -eq 1 ]
    then
        RMD=$1
    else
        # List Rmds in current working directory
        RMDs=$(ls -1 *.Rmd)
        # If more than one Rmd we don't know which to build
        if [ $(echo "${RMDs}" | wc -l) -gt 1 ]
        then
            echo "More than one Rmd in the current working directory."
            echo "I didn't know which to build\!"
            return 1
        else
            # Build the Rmd in the current working directory
            RMD=$RMDs
        fi
    fi

    echo Building $RMD...
    printf -v RCMD 'rmarkdown::render("%s")' $RMD
    Rscript -e $RCMD
}
